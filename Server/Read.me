ТЗ

1.       Итогом стажировки должно явиться система, обеспечивающая работу форума автомобильной тематики
2.       Приложение будет состоять из клиентской и серверной частей
3.       Система часть будет обеспечивать следующие функции
a.       Регистрация новых пользователей
b.       Поддержка режима администратора:
         i.      Просмотр тем
         ii.      Блокировка темы
         iii.      Блокировка пользователя
         iv.      Обжалование блокировки – общение с пользователем и разблокировка тем или пользователей
         v.      Создание тем, видимых всем
         vi.      Разрешение/запрет комментирования темы
c.       Режим обычного пользователя
         i.      Создание темы
         ii.      Просмотр тем
         iii.      Обжалование блокировки – общение с администратором
4.        Просмотр темы предполагает отображение текстового блока (одного или нескольких) и фото.
          Порядок отрисовки блоков определяется последовательностью элементов данных в JSON.
          Текстовый блок в режиме просмотра темы не должен позволять редактирование текста.
          Фото должны размещаться в виде горизонтального списка с возможностью прокрутки и увеличенного просмотра по тапу.
5.       Общение клиента и сервера должно выполняться посредством REST API
          (допускается использование статических ответов от серверной части). Разработка имитации API должна быть выполнена на базе Ruby Sinatra.
6.       Перечень и дизайн каждой формы должен быть согласован и утвержден совместно с руководителем практики.
7.       Для реализации сетевого слоя должен быть применен фреймворк Alamofire
8.       Язык реализации клиентской части – Swift

ТЗ на проект предлагаю формировать постепенно в виде дополнения к этой переписке в формате:

Приложение должно поддерживать две пользовательские роли:
- администратор
- пользователь

Форма входа в приложение/регистрации должна обеспечивать ввод логина и пароля пользователя, их передачу на сервер и обработку ответа.
При логине и регистрации должны использоваться различные REST запросы.

Ответ приходит в формате JSON следующей структуры:
{
   “isAdmin”: true
}

В случае, если поле isAdmin возвращается true, пользователь получает права администратора и доступ к администраторском функционалу.

В случае неуспешного входа в приложение сервер возвращает ответ с описанием причины ошибки в формате JSON следующей структуры:
{
                “errorResponse” : {
                               “message” : “Сообщение об ошибке для пользователя”
                }
}
При неуспешной попытке должно отобразиться диалоговое окно с текстом ошибки и кнопкой “ОК” по нажатии на которую оно будет закрыто.
